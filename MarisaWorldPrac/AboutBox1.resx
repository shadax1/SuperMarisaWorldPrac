<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textDescription.Text" xml:space="preserve">
    <value>Tool geared towards making dirty p easier than ever.

Hotkeys can be used to do various actions.
Note that the selected hotkeys will become unusable elsewhere while the tool is open.

There are 4 main sections in the tool:

'Coordinates' section shows Marisa's current coordinates, allows storing values from using the appropriate hotkey or clicking the 'Store' button.
This section also allows the input of a custom set of coordinates (game crashes if the value is too big).

'State states' allows the selection of a save state from the dropdown list.
The 'Save' button will save Marisa's coordinates for the current screen, and it can also save the 'Stars', 'Time' &amp; 'Score' values if the checkbox is checked.
Once clicked, the save state will be added to the dropdown list.
To load values after either clicking 'Store' or creating a save state with 'Save', simply click on 'Load' or use the appropriate hotkey.
It's also possible to go to the next or previous screen by clicking/using the appropriate button/hotkey. Note that since it's already fast to go back to the screen Marisa first spawns in, these buttons won't bring her to that screen in question.
If the tool isn't unlocking the save state feature when you are in a stage, try launching the game with Windows 7 compatibility. If that didn't help, check the readme file in the GitHub repository of this tool https://github.com/shadax1/SuperMarisaWorldPrac.

'Freeze values' section will freeze values upon checking one of the checkboxes.
'Stars', 'Time', 'Score' and 'Lives' will be frozen at the value specified in their respective textboxes below.
'Power-up' will be frozen at whatever its value was upon checking its box while 'Max P-speed and infinite flight' will always be set to 120 and 180 respectively, 'Invincibility frames' will give infinite invincibility to Marisa, 
'SPREAD MY WINGS' attempts to mimic the very famous trick by locking Marisa animation to being airborne and 'Score randomizer' will randomize the score based on the selected mode in the dropwdown list.
'Multiples of 10' will randomize the score with a value multiple of 10 between 0 and 300000 every 0.5s. 'Very random' will randomize the score with a value between 0 and 9999999 every 0.5s.

'Speed/P-speed/Rumia' section displays Marisa's running speed as well as a P-speed meter when she has her broom. From what I found, this value goes from 0 to 120 in increments of 2 on every frame.
This will also display the meter value Marisa had as soon as she jumps to get an idea of how close/far Marisa was from reaching P-speed.
It also displays a meter showing how long Marisa will be able to fly up after jumping with P-speed. The value stored upon jumping is 180 and decreases by 1 every frame, meaning Marisa has 3 seconds of flight time.
Finally, it will show how long the Rumia power-up lasts.

Only version 1.05 is supported.</value>
  </data>
</root>